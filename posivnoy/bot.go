package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/smtp"
	"strconv"
	"strings"
	"time"

	_ "github.com/lib/pq"
	"github.com/robfig/cron/v3"
	tb "gopkg.in/tucnak/telebot.v2"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–º–æ–π –≤ –ë–î –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
type dg_user struct {
	id       int
	usr_name string
	usr_cat  string
}

// ?
type notice struct {
	id   int
	text string
	cat  string
	hour int
	min  int
	date int
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
// cdesc - –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ Cron
// textGlob - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
// cat - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ—Ç–æ—Ä–æ–π –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
// ifAlw - –§–ª–∞–≥ –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π, –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –±—É–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é
// senders - –ö–∞—Ä—Ç–∞ —Ö—Ä–∞–Ω—è—â–∞—è —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ ID —á–∞—Ç–∞ - –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–∞—Ç–∞
// b - —Å—É—â–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ —Ñ—É–∫—Ü–∏—é –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
func makeCron(cdesc, textGlob, cat string, ifAlw bool, senders map[int64]*tb.Chat, b *tb.Bot) *cron.Cron {

	var userList string

	if cat == "all" {
		userList = selectAll()
	} else {
		userList = selectDB(cat)
	}
	c := cron.New()
	c.AddFunc(cdesc, func() {
		for key := range senders {
			uresp := "–£–≤–∞–∂–∞–µ–º—ã–µ " + userList + "\n–ù–∞–ø–æ–º–∏–Ω–∞—é:\n" + textGlob
			b.Send(senders[key], uresp)

		}
		if ifAlw == false {
			c.Stop()
		}
	})

	e := c.Entries()

	log.Println("cron: ", e)

	return c
}

// –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
func selectAll() string {
	connStr := "user=postgres password=qwe123 dbname=digital_users sslmode=disable"
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		panic(err)
	}
	defer db.Close()

	rows, err := db.Query("select distinct(usr_name) from dg_users")
	if err != nil {
		panic(err)
	}
	defer rows.Close()
	dgUsers := []dg_user{}

	for rows.Next() {
		p := dg_user{}
		err := rows.Scan(&p.usr_cat)
		if err != nil {
			fmt.Println(err)
			continue
		}
		dgUsers = append(dgUsers, p)
	}

	prodResp := ""

	// –°–æ—Ö—Ä–∞–Ω–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é prodResp –≤ —Ñ–æ—Ä–º–∞—Ç–µ "userName1, userName2"
	for i := 0; i <= len(dgUsers)-1; i++ {
		prodResp += dgUsers[i].usr_cat + ", "
	}

	return prodResp
}

func selectDB(cg string) string {
	connStr := "user=postgres password=qwe123 dbname=digital_users sslmode=disable"
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		panic(err)
	}
	defer db.Close()

	rows, err := db.Query("select * from dg_users where usr_cat = '" + cg + "'")
	if err != nil {
		panic(err)
	}
	defer rows.Close()
	dgUsers := []dg_user{}

	for rows.Next() {
		p := dg_user{}
		err := rows.Scan(&p.id, &p.usr_name, &p.usr_cat)
		if err != nil {
			fmt.Println(err)
			continue
		}
		dgUsers = append(dgUsers, p)
	}

	var prodResp string

	// –°–æ—Ö—Ä–∞–Ω–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é prodResp –≤ —Ñ–æ—Ä–º–∞—Ç–µ "userName1, userName2"
	for i := 0; i <= len(dgUsers)-1; i++ {
		prodResp += dgUsers[i].usr_name + ", "
	}

	return prodResp
}

func main() {

	senders := make(map[int64]*tb.Chat)

	var crn []*cron.Cron
	var notice []string

	botToken := "1188263369:AAEHda-pECm1HfI_TOlREfB59pruZtidKOg"
	b, err := tb.NewBot(tb.Settings{
		Token:  botToken,
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		return
	}

	log.Printf("Authorized on account posivnoy_bot")

//	c := cron.New()
//	c.AddFunc("CRON_TZ=Europe/Moscow 0 18 * * 1-5", func() {
//		auth := smtp.PlainAuth("", "mama210897@gmail.com", "mama23740740089334801021578749", "smtp.gmail.com")
//
//		// Connect to the server, authenticate, set the sender and recipient,
//		// and send the email all in one step.
//		to := []string{"schernetsov@fil-it.ru"}
//		msg := []byte("To: schernetsov@fil-it.ru\r\n" +
//			"Subject: discount Gophers!\r\n" +
//			"\r\n" +
//			"This is the email body.\r\n")
//		err := smtp.SendMail("smtp.gmail.com:587", auth, "mama210897@gmail.com", to, msg)
//		if err != nil {
//			log.Fatal(err)
//		}
//		log.Println("Remaind sended")
//	})
//	c.Start()

	// –ó–∞–¥–∞–µ–º –ø–µ—Ä–µ—á–µ–Ω—å –∫–Ω–æ–ø–æ–∫

	day := tb.InlineButton{
		Unique: "DAY",
		Text:   "‚åö –ë–ª–∏–∂–∞–π—à–∏–µ —Å—É—Ç–∫–∏",
	}

	chooseDate := tb.InlineButton{
		Unique: "CD",
		Text:   "üìÜ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É",
	}

	always := tb.InlineButton{
		Unique: "AL",
		Text:   "‚ôæÔ∏è –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ",
	}

	everyWeek := tb.InlineButton{
		Unique: "EW",
		Text:   "üìÖ –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é",
	}

	everyMonth := tb.InlineButton{
		Unique: "EM",
		Text:   "üóìÔ∏è –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü",
	}

	everyDay := tb.InlineButton{
		Unique: "ED",
		Text:   "üåÄ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
	}

	// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥—Ä—É–ø–ø—ã

	mainInline := [][]tb.InlineButton{
		[]tb.InlineButton{day, chooseDate},
		[]tb.InlineButton{always},
	}

	perInline := [][]tb.InlineButton{
		[]tb.InlineButton{everyWeek, everyMonth},
		[]tb.InlineButton{everyDay},
	}

	b.Handle("/start", func(m *tb.Message) {
		log.Println(m.Sender.Username, " id = ", m.Sender.ID, ": start")
		uresp := "–ü—Ä–∏–≤–µ—Ç! üó≥Ô∏è\n–Ø –ø–æ–º–æ–≥—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –ª—é–¥–µ–π –≤ –±–µ—Å–µ–¥–µ\n–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø:\n\n/all\n\n/an\n\n/dev\n\n–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∏–∂–µ: \n\n/ng designers –ü—Ä–∏–≤–µ—Ç üëã\n\n–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π:\n/show_cat\n\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–º–∞–Ω–¥–æ–π:\n/menu"
		b.Send(m.Chat, uresp)

		// –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≥–¥–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start
		senders[m.Chat.ID] = m.Chat

		// –ú–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
		b.Handle("/menu", func(m *tb.Message) {

			log.Println(m.Sender.Username, ": menu")

			uresp := "‚úâÔ∏è –ú–µ–Ω—é ‚úâÔ∏è"
			b.Send(m.Chat, uresp, &tb.ReplyMarkup{
				InlineKeyboard: mainInline,
			})

		})

		b.Handle(&day, func(c *tb.Callback) {

			log.Println(c.Sender.Username, ": menu")

			connStr := "user=postgres password=qwe123 dbname=digital_users sslmode=disable"
			db, err := sql.Open("postgres", connStr)
			if err != nil {
				panic(err)
			}
			defer db.Close()

			rows, err := db.Query("select distinct(usr_cat) from dg_users")
			if err != nil {
				panic(err)
			}
			defer rows.Close()
			dgUsers := []dg_user{}

			for rows.Next() {
				p := dg_user{}
				err := rows.Scan(&p.usr_cat)
				if err != nil {
					fmt.Println(err)
					continue
				}
				dgUsers = append(dgUsers, p)
			}

			uresp := "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n/c_all\n\n"

			for i := 0; i <= len(dgUsers)-1; i++ {
				uresp += "/c_" + dgUsers[i].usr_cat + "\n\n"
			}
			b.Edit(c.Message, uresp)

			b.Handle(tb.OnText, func(m *tb.Message) {

				log.Println(m.Sender.Username, ": ", m.Text)

				usCat := m.Text[3:]

				log.Println(m.Sender.Username, ": ")

				uresp := "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n–§–æ—Ä–º–∞—Ç: hh:mm"
				b.Send(m.Chat, uresp)

				b.Handle(tb.OnText, func(m *tb.Message) {

					log.Println(m.Sender.Username, ": ", m.Text)

					hourMin := strings.Split(m.Text, ":")

					hour := hourMin[0]
					min := hourMin[1]

					log.Println(m.Sender.Username, ": ")

					uresp := "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:"
					b.Send(m.Chat, uresp)

					b.Handle(tb.OnText, func(m *tb.Message) {

						cp := "CRON_TZ=Europe/Moscow " + min + " " + hour + " * * *"

						crn = append(crn, makeCron(cp, m.Text, usCat, true, senders, b))
						notice = append(notice, m.Text)

						crn[len(crn)-1].Start()

						uresp := "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
						b.Send(m.Chat, uresp)

						b.Handle(tb.OnText, func(m *tb.Message) {})

					})

				})

			})

		})

		b.Handle(&chooseDate, func(c *tb.Callback) {

			log.Println(c.Sender.Username, ": menu")

			connStr := "user=postgres password=qwe123 dbname=digital_users sslmode=disable"
			db, err := sql.Open("postgres", connStr)
			if err != nil {
				panic(err)
			}
			defer db.Close()

			rows, err := db.Query("select distinct(usr_cat) from dg_users")
			if err != nil {
				panic(err)
			}
			defer rows.Close()
			dgUsers := []dg_user{}

			for rows.Next() {
				p := dg_user{}
				err := rows.Scan(&p.usr_cat)
				if err != nil {
					fmt.Println(err)
					continue
				}
				dgUsers = append(dgUsers, p)
			}

			uresp := "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n/c_all\n\n"

			for i := 0; i <= len(dgUsers)-1; i++ {
				uresp += "/c_" + dgUsers[i].usr_cat + "\n\n"
			}
			b.Edit(c.Message, uresp)

			b.Handle(tb.OnText, func(m *tb.Message) {

				usCat := m.Text[3:]

				log.Println(m.Sender.Username, ": ")

				uresp := "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n–§–æ—Ä–º–∞—Ç: DD"
				b.Send(m.Chat, uresp)

				b.Handle(tb.OnText, func(m *tb.Message) {

					log.Println(m.Sender.Username, ": ", m.Text)

					date := m.Text

					uresp := "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n–§–æ—Ä–º–∞—Ç: hh:mm"
					b.Send(m.Chat, uresp)

					b.Handle(tb.OnText, func(m *tb.Message) {

						log.Println(m.Sender.Username, ": ", m.Text)

						hourMin := strings.Split(m.Text, ":")

						hour := hourMin[0]
						min := hourMin[1]

						log.Println(m.Sender.Username, ": ")

						uresp := "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:"
						b.Send(m.Chat, uresp)

						b.Handle(tb.OnText, func(m *tb.Message) {

							cp := "CRON_TZ=Europe/Moscow " + min + " " + hour + " " + date + " * *"

							crn = append(crn, makeCron(cp, m.Text, usCat, true, senders, b))
							notice = append(notice, m.Text)

							crn[len(crn)-1].Start()

							uresp := "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
							b.Send(m.Chat, uresp)

							b.Handle(tb.OnText, func(m *tb.Message) {})

						})

					})

				})
			})

		})

		b.Handle(&always, func(c *tb.Callback) {

			log.Println(c.Sender.Username, ": menu")

			connStr := "user=postgres password=qwe123 dbname=digital_users sslmode=disable"
			db, err := sql.Open("postgres", connStr)
			if err != nil {
				panic(err)
			}
			defer db.Close()

			rows, err := db.Query("select distinct(usr_cat) from dg_users")
			if err != nil {
				panic(err)
			}
			defer rows.Close()
			dgUsers := []dg_user{}

			for rows.Next() {
				p := dg_user{}
				err := rows.Scan(&p.usr_cat)
				if err != nil {
					fmt.Println(err)
					continue
				}
				dgUsers = append(dgUsers, p)
			}

			uresp := "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n/c_all\n\n"

			for i := 0; i <= len(dgUsers)-1; i++ {
				uresp += "/c_" + dgUsers[i].usr_cat + "\n\n"
			}
			b.Edit(c.Message, uresp)

			b.Handle(tb.OnText, func(m *tb.Message) {

				log.Println(m.Sender.Username, ": ", m.Text)

				usCat := m.Text[3:]

				log.Println(m.Sender.Username, ": ")

				uresp := "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å"
				b.Send(m.Chat, uresp, &tb.ReplyMarkup{
					InlineKeyboard: perInline,
				})

				b.Handle(&everyWeek, func(c *tb.Callback) {

					log.Println(c.Sender.Username, ": ", m.Text)

					uresp := "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏.\n–ï—Å–ª–∏ –¥–Ω–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)"
					b.Edit(c.Message, uresp)

					b.Handle(tb.OnText, func(m *tb.Message) {

						log.Println(m.Sender.Username, ": ", m.Text)

						weekDay := m.Text

						uresp := "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n–§–æ—Ä–º–∞—Ç: hh:mm"
						b.Send(m.Chat, uresp)

						b.Handle(tb.OnText, func(m *tb.Message) {

							log.Println(m.Sender.Username, ": ", m.Text)

							hourMin := strings.Split(m.Text, ":")

							hour := hourMin[0]
							min := hourMin[1]

							log.Println(m.Sender.Username, ": ")

							uresp := "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:"
							b.Send(m.Chat, uresp)

							b.Handle(tb.OnText, func(m *tb.Message) {

								cp := "CRON_TZ=Europe/Moscow " + min + " " + hour + " * * " + weekDay

								crn = append(crn, makeCron(cp, m.Text, usCat, true, senders, b))
								notice = append(notice, m.Text)

								crn[len(crn)-1].Start()

								uresp := "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
								b.Send(m.Chat, uresp)

								b.Handle(tb.OnText, func(m *tb.Message) {})

							})

						})

					})

				})

				b.Handle(&everyMonth, func(c *tb.Callback) {

					log.Println(c.Sender.Username, ": ", m.Text)

					uresp := "–£–∫–∞–∂–∏ —á–∏—Å–ª–æ.\n–ï—Å–ª–∏ –¥–Ω–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)"
					b.Edit(c.Message, uresp)

					b.Handle(tb.OnText, func(m *tb.Message) {

						log.Println(m.Sender.Username, ": ", m.Text)

						date := m.Text

						uresp := "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n–§–æ—Ä–º–∞—Ç: hh:mm"
						b.Send(m.Chat, uresp)

						b.Handle(tb.OnText, func(m *tb.Message) {

							log.Println(m.Sender.Username, ": ", m.Text)

							hourMin := strings.Split(m.Text, ":")

							hour := hourMin[0]
							min := hourMin[1]

							log.Println(m.Sender.Username, ": ")

							uresp := "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:"
							b.Send(m.Chat, uresp)

							b.Handle(tb.OnText, func(m *tb.Message) {

								cp := "CRON_TZ=Europe/Moscow " + min + " " + hour + " * " + date + " *"

								crn = append(crn, makeCron(cp, m.Text, usCat, true, senders, b))
								notice = append(notice, m.Text)

								crn[len(crn)-1].Start()

								uresp := "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
								b.Send(m.Chat, uresp)

								b.Handle(tb.OnText, func(m *tb.Message) {})

							})

						})

					})

				})

				b.Handle(&everyDay, func(c *tb.Callback) {

					log.Println(m.Sender.Username, ": ", m.Text)

					uresp := "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n–§–æ—Ä–º–∞—Ç: hh:mm"
					b.Send(m.Chat, uresp)

					b.Handle(tb.OnText, func(m *tb.Message) {

						log.Println(m.Sender.Username, ": ", m.Text)

						hourMin := strings.Split(m.Text, ":")

						hour := hourMin[0]
						min := hourMin[1]

						log.Println(m.Sender.Username, ": ")

						uresp := "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:"
						b.Send(m.Chat, uresp)

						b.Handle(tb.OnText, func(m *tb.Message) {

							cp := "CRON_TZ=Europe/Moscow " + min + " " + hour + " * * *"

							crn = append(crn, makeCron(cp, m.Text, usCat, true, senders, b))
							notice = append(notice, m.Text)

							crn[len(crn)-1].Start()

							uresp := "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
							b.Send(m.Chat, uresp)

							b.Handle(tb.OnText, func(m *tb.Message) {})

						})

					})

				})

			})

		})

		// –ö–æ–º–º–∞–Ω–¥—ã –≤—ã–∑–æ–≤–∞ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø

		b.Handle("/an", func(m *tb.Message) {

			log.Println(m.Sender.Username, ": analysts")

			userList := selectDB("an")

			log.Println(m.Sender.Username, ": ", userList)

			uresp := "–î–æ—Ä–æ–≥–∏–µ, " + userList + "—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –¥–ª—è –≤–∞—Å ‚úâÔ∏è"
			b.Send(m.Chat, uresp)

		})

		b.Handle("/dev", func(m *tb.Message) {

			log.Println(m.Sender.Username, ": dev")

			userList := selectDB("dev")

			log.Println(m.Sender.Username, ": ", userList)

			uresp := "–î–æ—Ä–æ–≥–∏–µ, " + userList + "—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –¥–ª—è –≤–∞—Å ‚úâÔ∏è"
			b.Send(m.Chat, uresp)

		})

		b.Handle("/ng", func(m *tb.Message) {

			ng := strings.Split(m.Text, " ")

			if len(ng) == 1 {
				uresp := "–ì—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
				b.Send(m.Chat, uresp)
			} else {

				log.Println(m.Sender.Username, ": ng: "+ng[1])

				userList := selectDB(ng[1])

				log.Println(m.Sender.Username, ": ", userList)

				uresp := ""

				if userList == "" {
					uresp = "–ì—Ä—É–ø–ø–∞ " + ng[1] + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞("
				} else {
					uresp = "–î–æ—Ä–æ–≥–∏–µ, " + userList + "—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –¥–ª—è –≤–∞—Å ‚úâÔ∏è"
				}

				b.Send(m.Chat, uresp)
			}

		})

		b.Handle("/all", func(m *tb.Message) {

			connStr := "user=postgres password=qwe123 dbname=digital_users sslmode=disable"
			db, err := sql.Open("postgres", connStr)
			if err != nil {
				panic(err)
			}
			defer db.Close()

			rows, err := db.Query("select distinct(usr_name) from dg_users")
			if err != nil {
				panic(err)
			}
			defer rows.Close()
			dgUsers := []dg_user{}

			for rows.Next() {
				p := dg_user{}
				err := rows.Scan(&p.usr_cat)
				if err != nil {
					fmt.Println(err)
					continue
				}
				dgUsers = append(dgUsers, p)
			}

			prodResp := ""

			for i := 0; i <= len(dgUsers)-1; i++ {
				prodResp += dgUsers[i].usr_cat + ", "
			}

			uresp = "–î–æ—Ä–æ–≥–∏–µ, " + prodResp + "—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –¥–ª—è –≤–∞—Å ‚úâÔ∏è"

			b.Send(m.Chat, uresp)

		})

		// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤ –±–∞–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		b.Handle("/show_cat", func(m *tb.Message) {

			connStr := "user=postgres password=qwe123 dbname=digital_users sslmode=disable"
			db, err := sql.Open("postgres", connStr)
			if err != nil {
				panic(err)
			}
			defer db.Close()

			rows, err := db.Query("select distinct(usr_cat) from dg_users")
			if err != nil {
				panic(err)
			}
			defer rows.Close()
			dgUsers := []dg_user{}

			for rows.Next() {
				p := dg_user{}
				err := rows.Scan(&p.usr_cat)
				if err != nil {
					fmt.Println(err)
					continue
				}
				dgUsers = append(dgUsers, p)
			}

			prodResp := "Categories:\n"

			for i := 0; i <= len(dgUsers)-1; i++ {
				prodResp += "‚≠ï " + dgUsers[i].usr_cat + "\n"
			}

			uresp := prodResp

			b.Send(m.Chat, uresp)

		})

		b.Handle("/show_cron", func(m *tb.Message) {

			log.Println(m.Sender.Username, ": remove cron")

			uresp := "–í–µ—Å—å –ø–µ—Ä–µ—á–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"

			for i := range notice {
				uresp += strconv.Itoa(i) + " " + notice[i] + "\n"
			}

			b.Send(m.Chat, uresp)

		})

		b.Handle("/cron", func(m *tb.Message) {

			input := strings.Split(m.Text, " ")

			num, err := strconv.Atoi(input[1])
			if err != nil {
				log.Println("Error conv")
			}

			crn[num].Remove(1)

			copy(crn[num:], crn[num+1:])
			crn = crn[:len(crn)-1]

			copy(notice[num:], notice[num+1:])
			notice = notice[:len(notice)-1]

			log.Println(m.Sender.Username, ": remove cron")

			uresp := "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ " + m.Text + " —É–¥–∞–ª–µ–Ω–æ!"
			b.Send(m.Chat, uresp)

		})

		b.Handle("/help", func(m *tb.Message) {

			log.Println(m.Sender.Username, ": help")
			uresp := "–ü—Ä–∏–≤–µ—Ç! üó≥Ô∏è\n–Ø –ø–æ–º–æ–≥—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –ª—é–¥–µ–π –≤ –±–µ—Å–µ–¥–µ\n–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø:\n\n/an\n\n/dev\n\n–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∏–∂–µ: \n\n/ng designers –ü—Ä–∏–≤–µ—Ç üëã\n\n–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π:\n/show_cat\n\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–º–∞–Ω–¥–æ–π:\n/menu\n\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n/show_cron\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–º–∞–Ω–¥—É /cron –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/cron 0"
			b.Send(m.Chat, uresp)

		})

	})

	b.Start()
}
